=============================
Render with text
=============================

Hello {{}}!

---

(source_file
  (text)
  (render_block)
  (text))

=============================
Multiline render
=============================

{{
}}
{{
    ""
}}

---

(source_file
 (text)
 (render_block)
 (text)
 (render_block
  (string_literal))
 (text))

=============================
Multiple renders
=============================
{{}}{{}}{{}}
---

(source_file
  (render_block)
  (render_block)
  (render_block))

=============================
Nested renders
:error
=============================

{{ {{}} }}

=============================
Identifier
=============================

{{ name }}
{{ nam_e1 }}
{{ _nam_e1 }}
{{ @name }}
{{ @na_me1 }}

---

(source_file
  (text)
  (render_block
    (identifier))
  (text)
  (render_block
    (identifier))
  (text)
  (render_block
    (identifier))
  (text)
  (render_block
    (identifier))
  (text)
  (render_block
    (identifier))
  (text))

=============================
Invalid identifier
:error
=============================

{{ @_iaminvalid }}

=============================
Parenthesized expression
=============================

{{ ("") }}
{{ (true) }}
{{ (name) }}

---

(source_file
  (text)
  (render_block
    (string_literal))
  (text)
  (render_block
    (boolean_literal))
  (text)
  (render_block
    (identifier))
  (text))

=============================
Function call
=============================

{{ foo() }}
{{ @foo() }}
{{ foo(x) }}
{{ foo(x, y) }}
{{ foo(bar()) }}

---

(source_file
  (text)
  (render_block
    (call_expression
      function: (identifier)
      arguments: (arguments)))
  (text)
  (render_block
    (call_expression
      function: (identifier)
      arguments: (arguments)))
  (text)
  (render_block
    (call_expression
      function: (identifier)
      arguments: (arguments
        (identifier))))
  (text)
  (render_block
    (call_expression
      function: (identifier)
      arguments: (arguments
        (identifier)
        (identifier))))
  (text)
  (render_block
    (call_expression
      function: (identifier)
      arguments: (arguments
        (call_expression
          function: (identifier)
          arguments: (arguments)))))
  (text))

=============================
Unary expression
=============================

{{ ! flag }}
{{ !true }}
{{ !"str" }}
{{ not true }}
{{ not "srr" }}
{{ not value }}

---

(source_file
  (text)
  (render_block
    (unary_expression
      (identifier)))
  (text)
  (render_block
    (unary_expression
      (boolean_literal)))
  (text)
  (render_block
    (unary_expression
      (string_literal)))
  (text)
  (render_block
    (unary_expression
      (boolean_literal)))
  (text)
  (render_block
    (unary_expression
      (string_literal)))
  (text)
  (render_block
    (unary_expression
      (identifier)))
  (text))

=============================
Binary expression
=============================

{{ a == b }}
{{ a != b }}
{{ a < b }}
{{ a > b }}
{{ a >= b }}
{{ a <= b }}
{{ a .. b }}
{{ a or b }}
{{ a and b }}
{{ a is not b }}

---

(source_file
  (text)
  (render_block
    (binary_expression
      left: (identifier)
      right: (identifier)))
  (text)
  (render_block
    (binary_expression
      left: (identifier)
      right: (identifier)))
  (text)
  (render_block
    (binary_expression
      left: (identifier)
      right: (identifier)))
  (text)
  (render_block
    (binary_expression
      left: (identifier)
      right: (identifier)))
  (text)
  (render_block
    (binary_expression
      left: (identifier)
      right: (identifier)))
  (text)
  (render_block
    (binary_expression
      left: (identifier)
      right: (identifier)))
  (text)
  (render_block
    (binary_expression
      left: (identifier)
      right: (identifier)))
  (text)
  (render_block
    (binary_expression
      left: (identifier)
      right: (identifier)))
  (text)
  (render_block
    (binary_expression
      left: (identifier)
      right: (identifier)))
  (text)
  (render_block
    (binary_expression
      left: (identifier)
      right: (identifier)))
  (text))

=============================
Nested unary expressions
=============================

{{ not not true }}
{{ not !true }}
{{ !!true }}
{{ false is not not true }}
{{ false is not ! true }}
{{ false is not a < false }}
{{ (false is not true) is not a }}

---

(source_file
  (text)
    (render_block
      (unary_expression
        (unary_expression
          (boolean_literal))))
  (text)
    (render_block
      (unary_expression
        (unary_expression
          (boolean_literal))))
  (text)
    (render_block
      (unary_expression
        (unary_expression
          (boolean_literal))))
  (text)
    (render_block
      (binary_expression
        (boolean_literal)
        (unary_expression
          (boolean_literal))))
  (text)
    (render_block
      (binary_expression
        (boolean_literal)
        (unary_expression
          (boolean_literal))))
  (text)
    (render_block
      (binary_expression
        (binary_expression
          (boolean_literal)
          (identifier))
         (boolean_literal)))
    (text)
      (render_block
        (binary_expression
          (binary_expression
            (boolean_literal)
            (boolean_literal))
          (identifier)))
    (text))

=============================
Nested binary expressions
=============================

{{ a or b and c or d and e }}
{{ not a and b or not c }}
{{ a == b and c != d or e > f }}
{{ x or y and z == w or v }}
{{ a and b or c and d or e }}

---

(source_file
  (text)
  (render_block
    (binary_expression
      (binary_expression
        (identifier)
        (binary_expression
          (identifier)
          (identifier)))
      (binary_expression
        (identifier)
        (identifier))))
  (text)
  (render_block
    (binary_expression
      (binary_expression
        (unary_expression
          (identifier))
        (identifier))
      (unary_expression
        (identifier))))
  (text)
  (render_block
    (binary_expression
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (binary_expression
          (identifier)
          (identifier)))
      (binary_expression
        (identifier)
        (identifier))))
  (text)
  (render_block
    (binary_expression
      (binary_expression
        (identifier)
        (binary_expression
          (identifier)
          (binary_expression
            (identifier)
            (identifier))))
      (identifier)))
  (text)
  (render_block
    (binary_expression
      (binary_expression
        (binary_expression
          (identifier)
          (identifier))
        (binary_expression
          (identifier)
          (identifier)))
      (identifier)))
  (text))
